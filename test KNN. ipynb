{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"id":"dGxw6ed7640P","executionInfo":{"status":"ok","timestamp":1683717930847,"user_tz":-120,"elapsed":527,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}}},"outputs":[],"source":["import pandas as pd\n"]},{"cell_type":"code","source":["df = pd.read_csv('/content/drive/MyDrive/CineHackers/Dataset clean/data3.csv')"],"metadata":{"id":"qABPfkhj6VLx","executionInfo":{"status":"ok","timestamp":1683717965337,"user_tz":-120,"elapsed":949,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"hynAJbY7Fp0K","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683717843568,"user_tz":-120,"elapsed":30145,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"d3700ab0-2a26-4e3e-e655-d5642761dc6e"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":491},"id":"ljnZt3xI7K0y","executionInfo":{"status":"ok","timestamp":1683717968030,"user_tz":-120,"elapsed":517,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"3187c821-53e4-483c-ea5b-9dd6cc0f1624"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     titleId                    title titleType                primaryTitle  \\\n","0  tt0035423          Kate et Léopold     movie              Kate & Leopold   \n","1  tt0069049  De l'autre côté du vent     movie  The Other Side of the Wind   \n","2  tt0079891     Le Temple de Shaolin     movie              Shaolin Temple   \n","3  tt0080440             Le Chat noir     movie               The Black Cat   \n","4  tt0080728   La femme de l'aviateur     movie          The Aviator's Wife   \n","\n","   startYear  runtimeMinutes                  genres  averageRating  numVotes  \\\n","0     2001.0           118.0  Comedy,Fantasy,Romance            6.4   86423.0   \n","1     2018.0           122.0                   Drama            6.7    7640.0   \n","2     1982.0           100.0     Action,Comedy,Drama            6.8    4570.0   \n","3     1981.0            92.0                  Horror            5.8    3998.0   \n","4     1981.0           106.0           Drama,Romance            7.5    4818.0   \n","\n","  genre_1  ...         actor_2             actor_3 actor_1_factorized  \\\n","0  Comedy  ...    Hugh Jackman      Liev Schreiber                  0   \n","1   Drama  ...       Oja Kodar   Peter Bogdanovich                  1   \n","2  Action  ...          Hai Yu         Chenghui Yu                  2   \n","3  Horror  ...    Mimsy Farmer       David Warbeck                  3   \n","4   Drama  ...   Marie Rivière    Anne-Laure Meury                  4   \n","\n","  actor_2_factorized actor_3_factorized rated_factorized  \\\n","0                  0                  0                0   \n","1                  1                  1                1   \n","2                  2                  2                2   \n","3                  3                  3                1   \n","4                  4                  4                3   \n","\n","  primaryName_factorized genre1_mapped genre2_mapped genre3_mapped  \n","0                      0             1            10             8  \n","1                      1             2             0             0  \n","2                      2             3             1             2  \n","3                      3             4             0             0  \n","4                      4             2             8             0  \n","\n","[5 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-46981a9d-ac8b-405c-bf7a-a9b18bbb580b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>titleId</th>\n","      <th>title</th>\n","      <th>titleType</th>\n","      <th>primaryTitle</th>\n","      <th>startYear</th>\n","      <th>runtimeMinutes</th>\n","      <th>genres</th>\n","      <th>averageRating</th>\n","      <th>numVotes</th>\n","      <th>genre_1</th>\n","      <th>...</th>\n","      <th>actor_2</th>\n","      <th>actor_3</th>\n","      <th>actor_1_factorized</th>\n","      <th>actor_2_factorized</th>\n","      <th>actor_3_factorized</th>\n","      <th>rated_factorized</th>\n","      <th>primaryName_factorized</th>\n","      <th>genre1_mapped</th>\n","      <th>genre2_mapped</th>\n","      <th>genre3_mapped</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>tt0035423</td>\n","      <td>Kate et Léopold</td>\n","      <td>movie</td>\n","      <td>Kate &amp; Leopold</td>\n","      <td>2001.0</td>\n","      <td>118.0</td>\n","      <td>Comedy,Fantasy,Romance</td>\n","      <td>6.4</td>\n","      <td>86423.0</td>\n","      <td>Comedy</td>\n","      <td>...</td>\n","      <td>Hugh Jackman</td>\n","      <td>Liev Schreiber</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>tt0069049</td>\n","      <td>De l'autre côté du vent</td>\n","      <td>movie</td>\n","      <td>The Other Side of the Wind</td>\n","      <td>2018.0</td>\n","      <td>122.0</td>\n","      <td>Drama</td>\n","      <td>6.7</td>\n","      <td>7640.0</td>\n","      <td>Drama</td>\n","      <td>...</td>\n","      <td>Oja Kodar</td>\n","      <td>Peter Bogdanovich</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>tt0079891</td>\n","      <td>Le Temple de Shaolin</td>\n","      <td>movie</td>\n","      <td>Shaolin Temple</td>\n","      <td>1982.0</td>\n","      <td>100.0</td>\n","      <td>Action,Comedy,Drama</td>\n","      <td>6.8</td>\n","      <td>4570.0</td>\n","      <td>Action</td>\n","      <td>...</td>\n","      <td>Hai Yu</td>\n","      <td>Chenghui Yu</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>tt0080440</td>\n","      <td>Le Chat noir</td>\n","      <td>movie</td>\n","      <td>The Black Cat</td>\n","      <td>1981.0</td>\n","      <td>92.0</td>\n","      <td>Horror</td>\n","      <td>5.8</td>\n","      <td>3998.0</td>\n","      <td>Horror</td>\n","      <td>...</td>\n","      <td>Mimsy Farmer</td>\n","      <td>David Warbeck</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>tt0080728</td>\n","      <td>La femme de l'aviateur</td>\n","      <td>movie</td>\n","      <td>The Aviator's Wife</td>\n","      <td>1981.0</td>\n","      <td>106.0</td>\n","      <td>Drama,Romance</td>\n","      <td>7.5</td>\n","      <td>4818.0</td>\n","      <td>Drama</td>\n","      <td>...</td>\n","      <td>Marie Rivière</td>\n","      <td>Anne-Laure Meury</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 30 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46981a9d-ac8b-405c-bf7a-a9b18bbb580b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-46981a9d-ac8b-405c-bf7a-a9b18bbb580b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-46981a9d-ac8b-405c-bf7a-a9b18bbb580b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lsptqQOSMkid","executionInfo":{"status":"ok","timestamp":1683717983004,"user_tz":-120,"elapsed":901,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"edc4e668-f1d5-40ae-a40c-82e9f312d8aa"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['titleId', 'title', 'titleType', 'primaryTitle', 'startYear',\n","       'runtimeMinutes', 'genres', 'averageRating', 'numVotes', 'genre_1',\n","       'genre_2', 'genre_3', 'primaryName', 'title.1', 'rated', 'actor',\n","       'plot', 'country', 'poster', 'actor_1', 'actor_2', 'actor_3',\n","       'actor_1_factorized', 'actor_2_factorized', 'actor_3_factorized',\n","       'rated_factorized', 'primaryName_factorized', 'genre1_mapped',\n","       'genre2_mapped', 'genre3_mapped'],\n","      dtype='object')"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pErmHw_eQsUl","executionInfo":{"status":"ok","timestamp":1683145032135,"user_tz":-120,"elapsed":785,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"70b1b806-0933-4939-d8c8-2ea1dccfa1c2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(11093, 22)"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["X = df[['genre1_mapped', 'genre2_mapped', 'genre3_mapped',\n","       'primaryName_factorized','startYear', 'runtimeMinutes','averageRating', 'numVotes']]\n","\n","y = df['title']\n","\n"],"metadata":{"id":"0I5m-OUZMfOR","executionInfo":{"status":"ok","timestamp":1683718061118,"user_tz":-120,"elapsed":203,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 55)\n","\n","model = KNeighborsClassifier(n_neighbors = 5)\n","model.fit(X_train, y_train)\n","print('train score is : ', model.score(X_train, y_train))\n","print('test score is :', model.score(X_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LLdn2cPSNdi1","executionInfo":{"status":"ok","timestamp":1683718071530,"user_tz":-120,"elapsed":503,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"0881ad6d-0f82-43e6-a6f8-e422a586bb4c"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["train score is :  0.19809428284854563\n","test score is : 0.0\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","my_film = 0\n","startYear = 2001\n","runtimeMinutes = 118\n","averageRating = 6.4\n","numVotes = 86423\n","genre1_mapped = 1\n","genre2_mapped = 10\n","genre3_mapped = 8\n","primaryName_factorized = 0\n","my_film = np.array([startYear, runtimeMinutes, averageRating, numVotes, genre1_mapped, genre2_mapped, genre3_mapped, primaryName_factorized]).reshape(1,8)\n","\n","print(model.predict(my_film))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mvobf7gIOjai","executionInfo":{"status":"ok","timestamp":1683718074794,"user_tz":-120,"elapsed":319,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"7dddcb21-264f-42be-825e-911388196d43"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["['Fin de Siècle']\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["A = df[['genre1_mapped', 'genre2_mapped', 'genre3_mapped',\n","       'primaryName_factorized','startYear','averageRating']]\n","\n","b = df['title']\n","\n","A_train, A_test, b_train, b_test = train_test_split(A, b, train_size = 0.75, random_state = 55)\n","\n","model = KNeighborsClassifier(n_neighbors = 1)\n","model.fit(A_train, b_train)\n","\n","A_train, A_test, b_train, b_test = train_test_split(A, b, train_size = 0.75, random_state = 55)\n","print('train score is : ', model.score(A_train, b_train))\n","print('test score is :', model.score(A_test, b_test))\n","\n","model = KNeighborsClassifier(n_neighbors = 5)\n","model.fit(A_train, b_train)\n","\n","my_film = 0\n","startYear = 2001\n","runtimeMinutes = 118\n","averageRating = 6.4\n","numVotes = 86423\n","genre1_mapped = 1\n","genre2_mapped = 10\n","genre3_mapped = 8\n","primaryName_factorized = 0\n","my_film = np.array([startYear, averageRating, genre1_mapped, genre2_mapped, genre3_mapped, primaryName_factorized]).reshape(1,6)\n","\n","print(model.predict(my_film))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rKLv7nkdQ5kv","executionInfo":{"status":"ok","timestamp":1683718078831,"user_tz":-120,"elapsed":204,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"a789e5e4-4d8d-4029-e06f-7fef3c794552"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["train score is :  0.9997492477432297\n","test score is : 0.0\n","['Gallipoli']\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["def custom_weights(X):\n","    # set weight for genre1_mapped and genre2_mapped\n","    genre_weight = np.where((X[:,5] == 1) | (X[:,1] == 1), 1/2, 1)\n","    # set weight for runtimeMinutes\n","    runtime_weight = np.where(X[:,3] < 120, 2, 1)\n","    # set weight for averageRating\n","    rating_weight = np.where(X[:,4] > 7, 3, 1)\n","    return genre_weight * runtime_weight * rating_weight\n","\n","model = KNeighborsClassifier(n_neighbors=5, weights=custom_weights)\n","model.fit(A_train, b_train)\n","print(model.predict(my_film))\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":415},"id":"V2WfWFNFDYfT","executionInfo":{"status":"error","timestamp":1683718083224,"user_tz":-120,"elapsed":327,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"3664980f-b5b7-4a0f-b21f-da009cd68517"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-970540c14f60>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKNeighborsClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_neighbors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcustom_weights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_film\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    245\u001b[0m         \u001b[0mn_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m         \u001b[0mn_queries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 247\u001b[0;31m         \u001b[0mweights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_weights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneigh_dist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    248\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_queries\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_base.py\u001b[0m in \u001b[0;36m_get_weights\u001b[0;34m(dist, weights)\u001b[0m\n\u001b[1;32m    130\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-970540c14f60>\u001b[0m in \u001b[0;36mcustom_weights\u001b[0;34m(X)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcustom_weights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;31m# set weight for genre1_mapped and genre2_mapped\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mgenre_weight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwhere\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;31m# set weight for runtimeMinutes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mruntime_weight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwhere\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m120\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 5 is out of bounds for axis 1 with size 5"]}]},{"cell_type":"code","source":["Index(['titleId', 'title', 'titleType', 'primaryTitle', 'startYear',\n","       'runtimeMinutes', 'genres', 'averageRating', 'numVotes', 'genre_1',\n","       'genre_2', 'genre_3', 'primaryName', 'title.1', 'rated', 'actor',\n","       'plot', 'country', 'poster', 'actor_1', 'actor_2', 'actor_3',\n","       'actor_1_factorized', 'actor_2_factorized', 'actor_3_factorized',\n","       'rated_factorized', 'primaryName_factorized', 'genre1_mapped',\n","       'genre2_mapped', 'genre3_mapped'],\n","      dtype='object')"],"metadata":{"id":"VKWI7_H7dn-a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsRegressor\n","neigh = KNeighborsRegressor(n_neighbors=2)\n","neigh.fit(X, y)\n","print(neigh.predict(X))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":346},"id":"Usc2R--YcCZC","executionInfo":{"status":"error","timestamp":1683719589444,"user_tz":-120,"elapsed":328,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"7cdbcd42-8000-468a-e809-e3be1ba97771"},"execution_count":30,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-890129bd6f1e>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mneigh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKNeighborsRegressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_neighbors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mneigh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneigh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_regression.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mweights\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m             \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_y\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mneigh_ind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m             \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneigh_dist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_y\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat64\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36mmean\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36mmean\u001b[0;34m(a, axis, dtype, out, keepdims, where)\u001b[0m\n\u001b[1;32m   3472\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3474\u001b[0;31m     return _methods._mean(a, axis=axis, dtype=dtype,\n\u001b[0m\u001b[1;32m   3475\u001b[0m                           out=out, **kwargs)\n\u001b[1;32m   3476\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_mean\u001b[0;34m(a, axis, dtype, out, keepdims, where)\u001b[0m\n\u001b[1;32m    179\u001b[0m     \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mumr_sum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwhere\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m         ret = um.true_divide(\n\u001b[0m\u001b[1;32m    182\u001b[0m                 ret, rcount, out=ret, casting='unsafe', subok=False)\n\u001b[1;32m    183\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_float16_result\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'str' and 'int'"]}]},{"cell_type":"code","source":["import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import sigmoid_kernel\n","import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"id":"JJwdf5EihhXB","executionInfo":{"status":"ok","timestamp":1683720977707,"user_tz":-120,"elapsed":348,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["df['plot']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oPPIBH_djvJD","executionInfo":{"status":"ok","timestamp":1683720979637,"user_tz":-120,"elapsed":393,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"c9566e8a-36cf-4591-b9f8-915ddedb524b"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0        An English Duke from 1876 is inadvertedly drag...\n","1        At a media-swamped party to celebrate his 70th...\n","2        A young man, hounded by a psychopathic general...\n","3        A professor with the psychic ability to commun...\n","4        A young student is devastated when he finds th...\n","                               ...                        \n","10630    Twelve-year-old Kareem Manning hires a crimina...\n","10631    Dilli, an ex-convict, endeavours to meet his d...\n","10632    A young mother escapes her abusive husband and...\n","10633    In rural 19th-century France, a mysterious, po...\n","10634    Basque Country, 1609. The men of the region ar...\n","Name: plot, Length: 10635, dtype: object"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["tfv = TfidfVectorizer(min_df=3, max_features=None, strip_accents='unicode', analyzer='word', token_pattern=r'\\w{1,}', ngram_range=(1,3))\n","tfv_matrix = tfv.fit_transform(df['plot'].values.astype('U'))\n","tfv_matrix.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eTouTnl-ep0f","executionInfo":{"status":"ok","timestamp":1683721210728,"user_tz":-120,"elapsed":2272,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"518d084a-029f-4656-efda-741254ab78a1"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10635, 30872)"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["sig = sigmoid_kernel(tfv_matrix, tfv_matrix)"],"metadata":{"id":"-r8E6jSCkqze","executionInfo":{"status":"ok","timestamp":1683721233603,"user_tz":-120,"elapsed":10321,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["indices = pd.Series(df.index, index = df.title)\n","indices"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jCSbF-9AmwfS","executionInfo":{"status":"ok","timestamp":1683721506693,"user_tz":-120,"elapsed":291,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"cedc559a-e758-4255-8bd9-a9efb2559234"},"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["title\n","Kate et Léopold                 0\n","De l'autre côté du vent         1\n","Le Temple de Shaolin            2\n","Le Chat noir                    3\n","La femme de l'aviateur          4\n","                            ...  \n","Coffee & Kareem             10630\n","Kaithi                      10631\n","Herself                     10632\n","The Cursed                  10633\n","Les sorcières d'Akelarre    10634\n","Length: 10635, dtype: int64"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["def give_rec(title, sig=sig):\n","    # get index corresponding to the original_title\n","    idx = indices[title]\n","    \n","    # Get the list of ids along with pairwise similarity scores of the provided idx with other ids\n","    # Sort the movies\n","    # Selecting top 10 movies for recommendation\n","    sig_scores = list(enumerate(sig[idx]))\n","    sig_scores = sorted(sig_scores, key=lambda x: x[1], reverse=True)\n","    sig_scores = sig_scores[1:11]\n","    \n","    # Movie indices \n","    movies_indices = [i[0] for i in sig_scores]\n","    \n","    # Top 10 similar movies\n","    return df.title.iloc[movies_indices]\n","\n","give_rec('Le Chat noir')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OuGQw8SFm-A4","executionInfo":{"status":"ok","timestamp":1683722109554,"user_tz":-120,"elapsed":361,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"bbc5ecd4-6996-41b4-cc6b-dbcdcfcba78a"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8134             Premier contact\n","7953                        P.K.\n","8474       Insidious: Chapitre 3\n","4553                L'orphelinat\n","2143                Dr. Dolittle\n","828                      Waxwork\n","1962    Fantômes contre fantômes\n","369                        Enemy\n","8492                   Incarnate\n","7                       Scanners\n","Name: title, dtype: object"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":491},"id":"6Pg2LJt9nIQK","executionInfo":{"status":"ok","timestamp":1683721329050,"user_tz":-120,"elapsed":322,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"b0abb102-e0cc-445f-a689-94d508183673"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     titleId                    title titleType                primaryTitle  \\\n","0  tt0035423          Kate et Léopold     movie              Kate & Leopold   \n","1  tt0069049  De l'autre côté du vent     movie  The Other Side of the Wind   \n","2  tt0079891     Le Temple de Shaolin     movie              Shaolin Temple   \n","3  tt0080440             Le Chat noir     movie               The Black Cat   \n","4  tt0080728   La femme de l'aviateur     movie          The Aviator's Wife   \n","\n","   startYear  runtimeMinutes                  genres  averageRating  numVotes  \\\n","0     2001.0           118.0  Comedy,Fantasy,Romance            6.4   86423.0   \n","1     2018.0           122.0                   Drama            6.7    7640.0   \n","2     1982.0           100.0     Action,Comedy,Drama            6.8    4570.0   \n","3     1981.0            92.0                  Horror            5.8    3998.0   \n","4     1981.0           106.0           Drama,Romance            7.5    4818.0   \n","\n","  genre_1  ...         actor_2             actor_3 actor_1_factorized  \\\n","0  Comedy  ...    Hugh Jackman      Liev Schreiber                  0   \n","1   Drama  ...       Oja Kodar   Peter Bogdanovich                  1   \n","2  Action  ...          Hai Yu         Chenghui Yu                  2   \n","3  Horror  ...    Mimsy Farmer       David Warbeck                  3   \n","4   Drama  ...   Marie Rivière    Anne-Laure Meury                  4   \n","\n","  actor_2_factorized actor_3_factorized rated_factorized  \\\n","0                  0                  0                0   \n","1                  1                  1                1   \n","2                  2                  2                2   \n","3                  3                  3                1   \n","4                  4                  4                3   \n","\n","  primaryName_factorized genre1_mapped genre2_mapped genre3_mapped  \n","0                      0             1            10             8  \n","1                      1             2             0             0  \n","2                      2             3             1             2  \n","3                      3             4             0             0  \n","4                      4             2             8             0  \n","\n","[5 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-f89f107f-b73d-4d9e-9e40-531871bbec5f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>titleId</th>\n","      <th>title</th>\n","      <th>titleType</th>\n","      <th>primaryTitle</th>\n","      <th>startYear</th>\n","      <th>runtimeMinutes</th>\n","      <th>genres</th>\n","      <th>averageRating</th>\n","      <th>numVotes</th>\n","      <th>genre_1</th>\n","      <th>...</th>\n","      <th>actor_2</th>\n","      <th>actor_3</th>\n","      <th>actor_1_factorized</th>\n","      <th>actor_2_factorized</th>\n","      <th>actor_3_factorized</th>\n","      <th>rated_factorized</th>\n","      <th>primaryName_factorized</th>\n","      <th>genre1_mapped</th>\n","      <th>genre2_mapped</th>\n","      <th>genre3_mapped</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>tt0035423</td>\n","      <td>Kate et Léopold</td>\n","      <td>movie</td>\n","      <td>Kate &amp; Leopold</td>\n","      <td>2001.0</td>\n","      <td>118.0</td>\n","      <td>Comedy,Fantasy,Romance</td>\n","      <td>6.4</td>\n","      <td>86423.0</td>\n","      <td>Comedy</td>\n","      <td>...</td>\n","      <td>Hugh Jackman</td>\n","      <td>Liev Schreiber</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>tt0069049</td>\n","      <td>De l'autre côté du vent</td>\n","      <td>movie</td>\n","      <td>The Other Side of the Wind</td>\n","      <td>2018.0</td>\n","      <td>122.0</td>\n","      <td>Drama</td>\n","      <td>6.7</td>\n","      <td>7640.0</td>\n","      <td>Drama</td>\n","      <td>...</td>\n","      <td>Oja Kodar</td>\n","      <td>Peter Bogdanovich</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>tt0079891</td>\n","      <td>Le Temple de Shaolin</td>\n","      <td>movie</td>\n","      <td>Shaolin Temple</td>\n","      <td>1982.0</td>\n","      <td>100.0</td>\n","      <td>Action,Comedy,Drama</td>\n","      <td>6.8</td>\n","      <td>4570.0</td>\n","      <td>Action</td>\n","      <td>...</td>\n","      <td>Hai Yu</td>\n","      <td>Chenghui Yu</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>tt0080440</td>\n","      <td>Le Chat noir</td>\n","      <td>movie</td>\n","      <td>The Black Cat</td>\n","      <td>1981.0</td>\n","      <td>92.0</td>\n","      <td>Horror</td>\n","      <td>5.8</td>\n","      <td>3998.0</td>\n","      <td>Horror</td>\n","      <td>...</td>\n","      <td>Mimsy Farmer</td>\n","      <td>David Warbeck</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>tt0080728</td>\n","      <td>La femme de l'aviateur</td>\n","      <td>movie</td>\n","      <td>The Aviator's Wife</td>\n","      <td>1981.0</td>\n","      <td>106.0</td>\n","      <td>Drama,Romance</td>\n","      <td>7.5</td>\n","      <td>4818.0</td>\n","      <td>Drama</td>\n","      <td>...</td>\n","      <td>Marie Rivière</td>\n","      <td>Anne-Laure Meury</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 30 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f89f107f-b73d-4d9e-9e40-531871bbec5f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f89f107f-b73d-4d9e-9e40-531871bbec5f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f89f107f-b73d-4d9e-9e40-531871bbec5f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["give_rec('Kate et Léopold')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":311},"id":"VMAOzIDYnBLl","executionInfo":{"status":"error","timestamp":1683721341904,"user_tz":-120,"elapsed":382,"user":{"displayName":"Victoria Gaullier","userId":"05886915277869315542"}},"outputId":"d35f9b14-a09c-4e73-9184-466d712057ec"},"execution_count":59,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-59-54b7a6c0d28e>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mgive_rec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Kate et Léopold'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-56-4612ec55a1d8>\u001b[0m in \u001b[0;36mgive_rec\u001b[0;34m(title, sig)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mgive_rec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;31m# get index corresponding to the original_title\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;31m# Get the list of ids along with pairwise similarity scores of the provided idx with other ids\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    979\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    980\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 981\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    982\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_hashable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m         \u001b[0;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1089\u001b[0;31m         \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1090\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values_for_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m    393\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    394\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_indexing_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 395\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    396\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    397\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Kate et Léopold'"]}]}]}